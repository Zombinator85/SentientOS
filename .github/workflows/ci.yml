name: CI

on:
  push:
  pull_request:

jobs:
  self-check:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375
    env:
      DOCKER_HOST: tcp://localhost:2375
      DOCKER_TLS_CERTDIR: ""
    steps:
      - uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-build-cache-${{ github.sha }}
          restore-keys: |
            docker-build-cache-

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - run: python -m scripts.lock install
      - run: python -m scripts.lock check

      - name: Cathedral CI
        run: python scripts/ci_self_check.py

      - uses: actions/cache@v3
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy-${{ hashFiles('**/pyproject.toml', 'mypy.ini') }}

      - name: Install pre-commit
        run: pip install pre-commit

      - run: pip install -e .[dev]

      - name: Pre-commit
        run: pre-commit run --all-files

      - name: Privilege lint
        run: python privilege_lint_cli.py

      - name: Verify audits
        run: python verify_audits.py logs/
        env:
          LUMOS_AUTO_APPROVE: '1'

      - name: Start Docker services
        run: docker compose --project-name sentientos-ci up --build -d

      - name: Wait for service health
        run: python scripts/wait_for_health.py --url http://localhost:5000/status --max-wait 60

      - name: Mypy strict check
        run: mypy --strict sentientos > MYPY_STATUS.md

      - name: Pytest with coverage
        run: pytest

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - run: pip install -e .[dev]

      - run: make docs
      - run: sphinx-build -b linkcheck -W docs docs/_build/linkcheck
  helm-k8s-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install kind
        run: |
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x kind
          sudo mv kind /usr/local/bin/kind
      - name: Install kubectl
        run: |
          sudo apt-get update
          sudo apt-get install -y kubectl
      - name: Install Helm
        run: |
          curl -L https://get.helm.sh/helm-v3.14.4-linux-amd64.tar.gz | tar -xz
          sudo mv linux-amd64/helm /usr/local/bin/helm
      - run: pip install -e .[dev]
      - name: Run helm integration test
        run: pytest tests/integration/helm_k8s_test.py
