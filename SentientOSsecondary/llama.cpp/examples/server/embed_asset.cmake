cmake_policy(SET CMP0057 NEW)

if(NOT DEFINED ASSET)
    message(FATAL_ERROR "ASSET is required")
endif()

if(NOT DEFINED SYMBOL)
    message(FATAL_ERROR "SYMBOL is required")
endif()

if(NOT DEFINED OUTPUT)
    message(FATAL_ERROR "OUTPUT is required")
endif()

file(READ "${ASSET}" _asset_bytes HEX)
string(LENGTH "${_asset_bytes}" _hex_length)
if(_hex_length EQUAL 0)
    set(_byte_count 0)
else()
    math(EXPR _byte_count "${_hex_length} / 2")
endif()

set(_array_values "")
set(_column_width 12)
math(EXPR _last_column "${_column_width} - 1")
set(_index 0)
while(_index LESS _byte_count)
    math(EXPR _offset "${_index} * 2")
    string(SUBSTRING "${_asset_bytes}" ${_offset} 2 _byte_hex)
    string(TOLOWER "${_byte_hex}" _byte_hex)
    if(_index EQUAL 0)
        set(_line "    0x${_byte_hex}")
    else()
        set(_line "0x${_byte_hex}")
    endif()

    math(EXPR _column_index "${_index} % ${_column_width}")
    if(NOT _column_index EQUAL 0)
        string(PREPEND _line " ")
    endif()

    math(EXPR _index_plus_one "${_index} + 1")
    if(_index_plus_one LESS _byte_count)
        string(APPEND _line ",")
    endif()

    string(APPEND _array_values "${_line}")

    if(_index_plus_one LESS _byte_count)
        if(_column_index EQUAL ${_last_column})
            string(APPEND _array_values "\n")
        else()
            string(APPEND _array_values " ")
        endif()
    endif()

    set(_index ${_index_plus_one})
endwhile()

set(_output "// Generated by embed_asset.cmake\n")
string(APPEND _output "#pragma once\n\n")
string(APPEND _output "#include <cstddef>\n\n")
string(APPEND _output "inline constexpr unsigned char ${SYMBOL}[] = {\n")
if(_byte_count GREATER 0)
    string(APPEND _output "${_array_values}\n")
endif()
string(APPEND _output "};\n")
string(APPEND _output "inline constexpr std::size_t ${SYMBOL}_len = sizeof(${SYMBOL});\n")

file(WRITE "${OUTPUT}" "${_output}")
