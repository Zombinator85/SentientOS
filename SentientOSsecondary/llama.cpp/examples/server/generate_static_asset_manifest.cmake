cmake_policy(SET CMP0007 NEW)
cmake_policy(SET CMP0057 NEW)

if(NOT DEFINED OUTPUT)
    message(FATAL_ERROR "OUTPUT is required")
endif()

if(DEFINED RECORD_FILE)
    if(NOT EXISTS "${RECORD_FILE}")
        message(FATAL_ERROR "RECORD_FILE does not exist: ${RECORD_FILE}")
    endif()
    file(READ "${RECORD_FILE}" _record_content)
else()
    set(_record_content "${RECORDS}")
endif()

string(REPLACE "\r\n" "\n" _record_content "${_record_content}")
string(REPLACE "\n" ";" RECORDS "${_record_content}")
list(FILTER RECORDS EXCLUDE REGEX "^$")

set(headers)
set(entries)
set(index 0)

function(_asset_mime_type path out_var)
    string(REGEX MATCH "\\.[^.]*$" ext "${path}")
    string(TOLOWER "${ext}" ext)
    if(ext STREQUAL ".gz")
        string(REGEX REPLACE "\\.gz$" "" base "${path}")
        string(REGEX MATCH "\\.[^.]*$" ext "${base}")
        string(TOLOWER "${ext}" ext)
        set(_encoded true)
    else()
        set(_encoded false)
        set(base "${path}")
    endif()

    if(ext STREQUAL ".js")
        set(mime "application/javascript")
    elseif(ext STREQUAL ".mjs")
        set(mime "application/javascript")
    elseif(ext STREQUAL ".css")
        set(mime "text/css")
    elseif(ext STREQUAL ".html")
        set(mime "text/html")
    elseif(ext STREQUAL ".json")
        set(mime "application/json")
    elseif(ext STREQUAL ".svg")
        set(mime "image/svg+xml")
    elseif(ext STREQUAL ".png")
        set(mime "image/png")
    elseif(ext STREQUAL ".jpg")
        set(mime "image/jpeg")
    elseif(ext STREQUAL ".jpeg")
        set(mime "image/jpeg")
    elseif(ext STREQUAL ".ico")
        set(mime "image/x-icon")
    else()
        set(mime "application/octet-stream")
    endif()

    set(${out_var} "${mime}" PARENT_SCOPE)
    set(${out_var}_ENCODED ${_encoded} PARENT_SCOPE)
    set(${out_var}_BASE "${base}" PARENT_SCOPE)
endfunction()

foreach(record ${RECORDS})
    string(REPLACE "|" ";" fields "${record}")
    list(LENGTH fields field_len)
    if(field_len LESS 3)
        message(FATAL_ERROR "Invalid asset record: ${record}")
    endif()
    list(GET fields 0 asset_path)
    list(GET fields 1 symbol)
    list(GET fields 2 header_path)

    get_filename_component(header_name "${header_path}" NAME)
    list(APPEND headers "${header_name}")

    _asset_mime_type("${asset_path}" mime)
    set(encoded ${mime_ENCODED})
    set(base_path ${mime_BASE})
    string(REPLACE "\\" "/" asset_route "${asset_path}")
    set(route "/assets/${asset_route}")
    if(encoded)
        string(REPLACE "\\" "/" base_route "${base_path}")
        _asset_mime_type("${base_path}" base_mime)
        set(mime "${base_mime}")
    endif()

    if(encoded)
        set(encoding "true")
    else()
        set(encoding "false")
    endif()

    string(REPLACE "\"" "\\\"" route_escaped "${route}")
    string(REPLACE "\"" "\\\"" mime_escaped "${mime}")

    list(APPEND entries "    {\"${route_escaped}\", \"${mime_escaped}\", ${encoding}, ${symbol}, static_cast<std::size_t>(${symbol}_len)}")
endforeach()

list(REMOVE_DUPLICATES headers)

set(output_content "// Generated by generate_static_asset_manifest.cmake\n")
string(APPEND output_content "#pragma once\n\n")
string(APPEND output_content "#include <array>\n")
string(APPEND output_content "#include <cstddef>\n")
string(APPEND output_content "#include <span>\n")
string(APPEND output_content "#include <string_view>\n\n")

foreach(header_name ${headers})
    string(APPEND output_content "#include \"${header_name}\"\n")
endforeach()

if(headers)
    string(APPEND output_content "\n")
endif()

list(LENGTH entries entry_count)

string(APPEND output_content "namespace llama::server {\n\n")
string(APPEND output_content "struct EmbeddedAsset {\n    std::string_view route;\n    std::string_view content_type;\n    bool gzip_encoded;\n    const unsigned char* data;\n    std::size_t size;\n};\n\n")

if(entry_count EQUAL 0)
    string(APPEND output_content "inline constexpr std::array<EmbeddedAsset, 0> kEmbeddedAssets{};\n\n")
else()
    string(APPEND output_content "inline constexpr std::array<EmbeddedAsset, ${entry_count}> kEmbeddedAssets = {{\n")
    foreach(entry ${entries})
        string(APPEND output_content "${entry},\n")
    endforeach()
    string(APPEND output_content "}};\n\n")
endif()

string(APPEND output_content "inline constexpr std::span<const EmbeddedAsset> EmbeddedAssetManifest() {\n    return std::span<const EmbeddedAsset>{kEmbeddedAssets};\n}\n\n")
string(APPEND output_content "}  // namespace llama::server\n")

file(WRITE ${OUTPUT} "${output_content}")
